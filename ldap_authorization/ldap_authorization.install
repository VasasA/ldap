<?php

/**
 * @file
 * Install, update and uninstall functions for the LDAP authorization module.
 */

/**
 * Implements hook_requirements().
 */
function ldap_authorization_requirements($phase) {
  $requirements = [];

  if ($phase != "install" && db_field_exists('ldapauth', 'ldapgroups_in_dn')) {
    $requirements['ldap_authorization_ldap_integration']['title'] = t('LDAP Integration LDAP Groups Upgrade Concern');
    $requirements['ldap_authorization_ldap_integration']['severity'] = REQUIREMENT_WARNING;
    $requirements['ldap_authorization_ldap_integration']['value'] = NULL;
    $requirements['ldap_authorization_ldap_integration']['description'] = t('LDAP Authorization will need to be configured by hand.
      The authorization options are different and automated updgrade is not possible.
      See also. See https://drupal.org/node/1023016, https://drupal.org/node/1183192.
      This message will go away when the ldapauth database table is removed.');
  }
  // Check that ldapauth not installed.
  return $requirements;
}

/**
 * Implements hook_install().
 */
function ldap_authorization_install() {

  cache_clear_all('field_info_types:', 'cache_field', TRUE);
  foreach (ldap_authorization_user_entity_fields() as $field_id => $field_conf) {
    $field_info = field_info_field($field_id);
    if (!$field_info) {
      field_create_field($field_conf['field']);
      field_create_instance($field_conf['instance']);
    }
  }

}

/**
 * Implements hook_uninstall().
 */
function ldap_authorization_uninstall() {
  foreach (ldap_authorization_user_entity_fields() as $field_id => $field_conf) {

    $instance = field_info_instance($field_conf['instance']['entity_type'], $field_conf['instance']['field_name'], $field_conf['instance']['bundle']);
    if ($instance) {
      field_delete_instance($instance);
    }

    $field_info = field_info_field($field_conf['field']['field_name']);
    if ($field_info) {
      field_delete_field($field_conf['field']['field_name']);
    }
  }
  module_load_include('inc', 'ldap_servers', 'ldap_servers.user_data_remove');
  batch_set(ldap_severs_user_data_setup_batch());
  $batch =& batch_get();

}

/**
 *
 */
function ldap_authorization_user_entity_fields() {

  $fields = [];

  return $fields;
}

/**
 * Implements hook_update_last_removed().
 */
function ldap_authorization_update_last_removed() {
  return 7204;
}

/**
 * Move settings of the LDAP consumers from database to config
 */
function ldap_authorization_update_1000() {
  if (db_table_exists('ldap_authorization')) {
    $select = db_select('ldap_authorization')
      ->fields('ldap_authorization')
      ->execute()
      ->fetchAll();
    foreach($select as $values) {
      $values->mappings = str_replace('\\"', '"', $values->mappings);
      // Replace 'drupal' with 'backdrop'.
      if ($values->consumer_type == 'drupal_role') {
        $values->consumer_type = 'backdrop_role';
        $values->consumer_module = 'ldap_authorization_backdrop_role';
      }
      // Save to config.
      $config = config('ldap.authorization.' . $values->consumer_type);
      $config->set('id', $values->consumer_type);
      $config->set('config', $values);
      $config->save();
    }
    db_drop_table('ldap_authorization');
  }
}

/**
 * Enable the ldap_authorization_backdrop_role module instead of the ldap_authorization_drupal_role.
 */
function ldap_authorization_update_1001() {
  // Check that the 'backdrop_role' consumer is enabled.
  $config = config_get('ldap.authorization.backdrop_role', 'config');
  if (isset($config['status']) && $config['status'] && module_exists('ldap_authorization')) {
    module_enable(array('ldap_authorization_backdrop_role'), TRUE);
  }
  // Delete the record of the unavailable 'ldap_authorization_drupal_role' module.
  db_delete('system')
    ->condition('name', 'ldap_authorization_drupal_role')
    ->execute();
}

/**
 * Copy content of the 'authmap' table into the 'ldap_authmap' table.
 */
function ldap_authorization_update_1002() {
  $ldap_authmap_schema = backdrop_get_schema_unprocessed('ldap_user', 'ldap_authmap');
  db_create_table('ldap_authmap', $ldap_authmap_schema);
  if (db_table_exists('authmap') && db_table_exists('ldap_authmap')) {
    $auth = db_select('authmap')
      ->fields('authmap')
      ->condition('module', 'ldap_user')
      ->execute()
      ->fetchAllAssoc('aid', PDO::FETCH_ASSOC);
    $query = db_insert('ldap_authmap')->fields(array_keys($ldap_authmap_schema['fields']));
    foreach ($auth as $auth_row) {
      $query->values($auth_row);
    }
    $query->execute();

    // Delete the copied records.
    db_delete('authmap')
      ->condition('module', 'ldap_user')
      ->execute();
  }
}

/**
 * Replace 'drupal_role' consumer with 'backdrop_role' in 'users' table.
 */
function ldap_authorization_update_1003() {
  $select = db_select('users')
    ->fields('users', array('uid', 'data'))
    ->execute()
    ->fetchAll();
  foreach($select as $row) {
    $data = unserialize($row->data);
    if (isset($data['ldap_authorizations']['drupal_role'])) {
      $data['ldap_authorizations']['backdrop_role'] = $data['ldap_authorizations']['drupal_role'];
      unset($data['ldap_authorizations']['drupal_role']);
      $data = serialize($data);
      db_update('users')
        ->fields(array('data' => $data))
        ->condition('uid', $row->uid)
        ->execute();
    }
  }
}
