<?php

/**
 * @file
 * Install, update and uninstall functions for the LDAP API module.
 */

/**
 * Implements hook_install().
 */
function ldap_servers_install() {

}

/**
 * Implements hook_uninstall().
 */
function ldap_servers_uninstall() {

}

/**
 * Implements hook_requirements().
 */
function ldap_servers_requirements($phase) {
  $requirements = [];
  $t = get_t();

  if ($phase == 'install') {
    $requirements['ldap_extension_loaded']['title'] = t('LDAP Extension Loaded');
    if (extension_loaded('ldap')) {
      $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_ERROR;
      $requirements['ldap_extension_loaded']['description'] = t('No LDAP PHP Extension is loaded for PHP, so LDAP will not work properly.');
    }
  }

  if ($phase == 'runtime' && !extension_loaded('ldap')) {
    $requirements['ldap_extension_loaded']['title'] = t('LDAP Extension Loaded');
    $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_ERROR;
    $requirements['ldap_extension_loaded']['description'] = t('No LDAP PHP Extension is loaded for PHP, so LDAP will not work properly.');
  }

  if ($phase != "install" && db_table_exists('ldapauth')) {
    $requirements['ldap_servers']['title'] = t('LDAP Integration LDAP Auth to LDAP Servers Upgrade Concern');
    $requirements['ldap_servers']['severity'] = REQUIREMENT_WARNING;
    $requirements['ldap_servers']['value'] = NULL;
    $requirements['ldap_servers']['description'] = t('LDAP Servers will need to be configured by hand.
      This message will go away when the ldapauth database table is removed.');
  }
  // Check that ldapauth not installed.
  // Check enabled LDAP servers are configured and Backdrop can connect to them.
  if ($phase == 'runtime') {
    $requirements['ldap_servers_enabled'] = [
      'title' => $t('LDAP Server status'),
      'value' => $t('Disabled'),
      'severity' => REQUIREMENT_WARNING,
    ];

    $servers = ldap_servers_get_servers(NULL, 'enabled');
    if (!empty($servers)) {
      unset($requirements['ldap_servers_enabled']);

      foreach ($servers as $server) {
        $server_req_key = 'ldap_servers_sid_' . $server->sid;
        $server_tokens = [
          '@host' => $server->address,
          '@sid' => $server->sid,
        ];
        $requirements[$server_req_key] = [
          'title' => $t('LDAP Server status: @sid (@host)', $server_tokens),
          'value' => $t('Connection: Failed, check logs for details.', $server_tokens),
          'severity' => REQUIREMENT_ERROR,
        ];

        try {
          $connect_result = $server->connect();
          if ($connect_result == LDAP_SUCCESS) {
            if ($server->bind_method == LDAP_SERVERS_BIND_METHOD_USER) {
              // Check bind anonymously if set to bind via user credentials.
              // The user has already logged in and so their is no dn or password
              // to check since LDAP doesn't store passwords.
              $bind_result = $server->bind(NULL, NULL, TRUE);
            }
            else {
              $bind_result = $server->bind();
            }
            if ($bind_result == LDAP_SUCCESS) {
              $requirements[$server_req_key]['value'] = $t('Connection: Success, Bind: Success', $server_tokens);
              $requirements[$server_req_key]['severity'] = REQUIREMENT_OK;
            }
          }
          $server->disconnect();
        }
        catch (Exception $e) {
        }
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_update_last_removed().
 */
function ldap_servers_update_last_removed() {
  return 7209;
}

/**
 * Move ldap_servers module settings from variables to config.
 */
function ldap_servers_update_1000() {
  // Migrate variables to config.
  $config = config('ldap_servers.settings');
  $config->set('ldap_servers_encryption', update_variable_get('ldap_servers_encryption', 10));
  $config->set('ldap_servers_simpletest', update_variable_get('ldap_simpletest', FALSE));
  $config->set('ldap_servers_overrides', update_variable_get('ldap_servers_overrides', array()));
  $config->set('ldap_servers_encrypt_key', update_variable_get('ldap_servers_encrypt_key', FALSE));
  $config->set('ldap_servers_simpletest_globals', update_variable_get('ldap_simpletest_globals', array()));
  $config->set('previous_encryption', update_variable_get('previous_encryption', 10));
  $config->set('watchdog_detail', update_variable_get('watchdog_detail', 0));
  $config->set('user_data_clear', update_variable_get('user_data_clear', 0));
  $config->set('user_data_clear_date', update_variable_get('user_data_clear_date', 0));
  $config->save();

  // Delete variables.
  update_variable_del('ldap_servers_encryption');
  update_variable_del('ldap_simpletest');
  update_variable_del('ldap_servers_overrides');
  update_variable_del('ldap_servers_encrypt_key');
  update_variable_del('ldap_simpletest_globals');
  update_variable_del('previous_encryption');
  update_variable_del('watchdog_detail');
  update_variable_del('user_data_clear');
  update_variable_del('user_data_clear_date');

}

/**
 * Move settings of the LDAP servers from database to config
 */
function ldap_servers_update_1001() {
  if (db_table_exists('ldap_servers')) {
    $select = db_select('ldap_servers')
      ->fields('ldap_servers')
      ->execute()
      ->fetchAll();
    foreach ($select as $values) {
      unset($values->numeric_sid);
      $values->basedn = unserialize($values->basedn);
      // Replace 'drupal' with 'backdrop'.
      $values->ldap_to_backdrop_user = $values->ldap_to_drupal_user;
      unset($values->ldap_to_drupal_user);
      $values->testing_backdrop_username = $values->testing_drupal_username;
      unset($values->testing_drupal_username);
      $values->testing_backdrop_user_dn = $values->testing_drupal_user_dn;
      unset($values->testing_drupal_user_dn);
      // Save to config.
      $config = config('ldap.server.' . $values->sid);
      $config->set('id', $values->sid);
      $config->set('name', $values->name);
      $config->set('config', $values);
      $config->save();
    }
    db_drop_table('ldap_servers');
  }
}
