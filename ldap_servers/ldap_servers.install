<?php

/**
 * @file
 * Install, update and uninstall functions for the LDAP API module.
 */

/**
 * Implements hook_install().
 */
function ldap_servers_install() {

}

/**
 * Implements hook_uninstall().
 */
function ldap_servers_uninstall() {

}

/**
 * Implements hook_requirements().
 */
function ldap_servers_requirements($phase) {
  $requirements = [];
  $t = get_t();

  if ($phase == 'install') {
    $requirements['ldap_extension_loaded']['title'] = t('LDAP Extension Loaded');
    if (extension_loaded('ldap')) {
      $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_ERROR;
      $requirements['ldap_extension_loaded']['description'] = t('No LDAP PHP Extension is loaded for PHP, so LDAP will not work properly.');
    }
  }

  if ($phase == 'runtime' && !extension_loaded('ldap')) {
    $requirements['ldap_extension_loaded']['title'] = t('LDAP Extension Loaded');
    $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_ERROR;
    $requirements['ldap_extension_loaded']['description'] = t('No LDAP PHP Extension is loaded for PHP, so LDAP will not work properly.');
  }

  if ($phase != "install" && db_table_exists('ldapauth')) {
    $requirements['ldap_servers']['title'] = t('LDAP Integration LDAP Auth to LDAP Servers Upgrade Concern');
    $requirements['ldap_servers']['severity'] = REQUIREMENT_WARNING;
    $requirements['ldap_servers']['value'] = NULL;
    $requirements['ldap_servers']['description'] = t('LDAP Servers will need to be configured by hand.
      This message will go away when the ldapauth database table is removed.');
  }
  // Check that ldapauth not installed.
  // Check enabled LDAP servers are configured and Backdrop can connect to them.
  if ($phase == 'runtime') {
    $requirements['ldap_servers_enabled'] = [
      'title' => $t('LDAP Server status'),
      'value' => $t('Disabled'),
      'severity' => REQUIREMENT_WARNING,
    ];

    $servers = ldap_servers_get_servers(NULL, 'enabled');
    if (!empty($servers)) {
      unset($requirements['ldap_servers_enabled']);

      foreach ($servers as $server) {
        $server_req_key = 'ldap_servers_sid_' . $server->sid;
        $server_tokens = [
          '@host' => $server->address,
          '@sid' => $server->sid,
        ];
        $requirements[$server_req_key] = [
          'title' => $t('LDAP Server status: @sid (@host)', $server_tokens),
          'value' => $t('Connection: Failed, check logs for details.', $server_tokens),
          'severity' => REQUIREMENT_ERROR,
        ];

        try {
          $connect_result = $server->connect();
          if ($connect_result == LDAP_SUCCESS) {
            if ($server->bind_method == LDAP_SERVERS_BIND_METHOD_USER) {
              // Check bind anonymously if set to bind via user credentials.
              // The user has already logged in and so their is no dn or password
              // to check since LDAP doesn't store passwords.
              $bind_result = $server->bind(NULL, NULL, TRUE);
            }
            else {
              $bind_result = $server->bind();
            }
            if ($bind_result == LDAP_SUCCESS) {
              $requirements[$server_req_key]['value'] = $t('Connection: Success, Bind: Success', $server_tokens);
              $requirements[$server_req_key]['severity'] = REQUIREMENT_OK;
            }
          }
          $server->disconnect();
        }
        catch (Exception $e) {
        }
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function ldap_servers_schema() {
  module_load_include('inc', 'ldap_servers', 'ldap_servers.functions');
  // To get the LDAP_SERVERS_ENC_TYPE_CLEARTEXT constants issue#1209576.
  module_load_include('module', 'ldap_servers', 'ldap_servers');
  module_load_include('php', 'ldap_servers', 'LdapServerAdmin.class');

  $schema['ldap_servers'] = [
    'export' => [
      'key' => 'sid',
      'key name' => 'Server ID',
      'primary key' => 'numeric_sid',
      'identifier' => 'ldap_servers_conf',
      'api' => [
        'owner' => 'ldap_servers',
        'api' => 'ldap_servers',
        'minimum_version' => 1,
        'current_version' => 1,
      ],
    ],
    'primary key' => ['numeric_sid'],
    'unique keys' => ['name' => ['name']],
  ];

  $fields = LdapServerAdmin::fields();
  foreach ($fields as $name => $props) {
    if (isset($props['schema'])) {
      $schema['ldap_servers']['fields'][$name] = $props['schema'];
    }
  }

  return $schema;

}
