<?php

/**
 * @file
 * The ldaphelp module is a module to help admins debug ldap_integration modules.
 */

/**
 * Implements hook_menu().
 */
function ldap_help_menu() {
  $items = [];
  $items['admin/config/people/ldap/help'] = [
    'title' => 'Help',
    'type' => MENU_LOCAL_TASK,
    'weight' => 9,
    'description' => 'Debugging and Configuration Help with LDAP',
    'file' => 'ldap_help.resources.inc',
    'page callback' => 'ldap_help_main',
    'access arguments' => ['administer site configuration'],
  ];

  $items['admin/config/people/ldap/help/intro'] = [
    'title' => 'Resources',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ];

  $items['admin/config/people/ldap/help/status'] = [
    'title' => 'Status',
    'description' => 'LDAP status page',
    'page callback' => 'ldap_help_status',
    'access arguments' => ['administer site configuration'],
    'file' => 'ldap_help.status.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  ];

  $items['admin/config/people/ldap/help/watchdog'] = [
    'title' => 'Watchdog',
    'description' => 'LDAP watchdog logs',
    'page callback' => 'ldap_help_watchdog',
    'access arguments' => ['administer site configuration'],
    'file' => 'ldap_help.watchdog.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  ];

  $items['admin/config/people/ldap/help/issues'] = [
    'title' => 'Issue Reporting',
    'description' => 'Creating LDAP Issue Queue Items',
    'page callback' => 'ldap_help_issues',
    'access arguments' => ['administer site configuration'],
    'file' => 'ldap_help.issues.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
  ];

  $items['admin/config/people/ldap/help/examples'] = [
    'title' => 'Sample LDAPs',
    'description' => 'Sample LDAPs from Documentation',
    'page callback' => 'ldap_help_examples',
    'access arguments' => ['administer site configuration'],
    'file' => 'ldap_help.examples.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
  ];

  return $items;
}

/**
 *
 */
function ldap_help_form_ldap_servers_settings_alter(&$form, &$form_state) {
  $config = config('ldap_help.settings');
  $form['watchdog_detail'] = ['#type' => 'fieldset', '#title' => t('Development')];
  $form['watchdog_detail']['watchdog_detail'] = [
    '#type' => 'checkbox',
    '#title' => t('Enabled Detailed LDAP Watchdog logging. This is generally for
       debugging and reporting issues with the ldap modules and should not be left
       on.'),
    '#default_value' => $config->get('ldap_help_watchdog_detail'),
  ];
  $date = $config->get('ldap_help_user_data_clear_set_date');
  if (!$date) {
    $date = time();
  }
  $form['watchdog_detail']['user_data_clear'] = [
    '#type' => 'checkbox',
    '#title' => t('Discard and ignore user authorization data stored by ldap module in user records data before %date.
      This is useful for implementers of development versions of the module
      that may have corrupt user data from the past.', ['%date' => date('Y-m-d H:i:s', $date)]),
    '#default_value' => $config->get('ldap_help_user_data_clear'),
  // array('%date' => date('Y-m-d H:i:s', $date))
  ];
  $form['watchdog_detail']['user_data_clear_date'] = [
    '#type' => 'checkbox',
    '#title' => t('Reset the clear date to the current date %date', ['%date' => date('Y-m-d H:i:s')]),
    '#default_value' => $config->get('ldap_help_user_data_clear_set_date'),
  ];
  $form['#submit'][] = 'ldap_help_watchdog_detail_submit';
}

/**
 *
 */
function ldap_help_watchdog_detail_submit($form, &$form_state) {
  $config = config('ldap_help.settings');
  if ($form_state['submitted']) {
    $watchdog_detail = $form_state['values']['watchdog_detail'];
    if ($watchdog_detail != $config->get('ldap_help_watchdog_detail')) {
      $config->set('ldap_help_watchdog_detail', $watchdog_detail);
      $config->save();
    }
    if ($form_state['values']['user_data_clear'] != $config->get('ldap_help_user_data_clear')) {
      $config->set('ldap_help_user_data_clear', $form_state['values']['user_data_clear']);
      $config->save();
    }
    if ($form_state['values']['user_data_clear_date'] != 0) {
      $config->set('ldap_help_user_data_clear_set_date', time());
      $config->save();
    }
  }
}

/**
 * Implements hook_config_info().
 */
function ldap_help_config_info() {
  $prefixes['ldap_help.settings'] = array(
    'label' => t('LDAP Help settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}
